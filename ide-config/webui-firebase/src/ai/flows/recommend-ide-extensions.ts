// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview Recommends IDE extensions based on user preferences and project type.
 *
 * - recommendIdeExtensions - A function that recommends IDE extensions.
 * - RecommendIdeExtensionsInput - The input type for the recommendIdeExtensions function.
 * - RecommendIdeExtensionsOutput - The return type for the recommendIdeExtensions function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const RecommendIdeExtensionsInputSchema = z.object({
  ideName: z.string().describe('The name of the IDE.'),
  projectType: z.string().describe('The type of project (e.g., web, mobile, data science).'),
  userPreferences: z.string().describe('The user\u2019s preferences for extensions (e.g., testing frameworks, linters, code completion tools).'),
  currentSetup: z.string().describe('The current setup of the IDE, including installed extensions and configurations.'),
});
export type RecommendIdeExtensionsInput = z.infer<typeof RecommendIdeExtensionsInputSchema>;

const RecommendIdeExtensionsOutputSchema = z.object({
  recommendedExtensions: z.array(z.string()).describe('A list of recommended extensions for the IDE.'),
  reasoning: z.string().describe('The reasoning behind the extension recommendations, tailored to user preferences and current setup.'),
});
export type RecommendIdeExtensionsOutput = z.infer<typeof RecommendIdeExtensionsOutputSchema>;

export async function recommendIdeExtensions(input: RecommendIdeExtensionsInput): Promise<RecommendIdeExtensionsOutput> {
  return recommendIdeExtensionsFlow(input);
}

const recommendIdeExtensionsPrompt = ai.definePrompt({
  name: 'recommendIdeExtensionsPrompt',
  input: {schema: RecommendIdeExtensionsInputSchema},
  output: {schema: RecommendIdeExtensionsOutputSchema},
  prompt: `You are an expert IDE extension recommender, tailoring recommendations to user preferences and current setup.

  Based on the IDE, project type, user preferences, and current setup, recommend a list of extensions that would be helpful for the user.

  IDE Name: {{{ideName}}}
  Project Type: {{{projectType}}}
  User Preferences: {{{userPreferences}}}
  Current Setup: {{{currentSetup}}}

  Provide a detailed reasoning for each extension recommendation, explaining how it addresses the user's preferences and complements their current setup.
`,
});

const recommendIdeExtensionsFlow = ai.defineFlow(
  {
    name: 'recommendIdeExtensionsFlow',
    inputSchema: RecommendIdeExtensionsInputSchema,
    outputSchema: RecommendIdeExtensionsOutputSchema,
  },
  async input => {
    const {output} = await recommendIdeExtensionsPrompt(input);
    return output!;
  }
);
