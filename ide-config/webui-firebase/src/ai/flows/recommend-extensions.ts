
// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview Recommends IDE extensions based on user preferences and project type.
 *
 * - recommendExtensions - A function that recommends IDE extensions.
 * - RecommendExtensionsInput - The input type for the recommendExtensions function.
 * - RecommendExtensionsOutput - The return type for the recommendExtensions function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const UserPreferencesSchema = z.object({
  testing: z.array(z.string()).optional().describe('Selected preferences for testing.'),
  lintingFormatters: z.array(z.string()).optional().describe('Selected preferences for linting and formatting.'),
  aiAssistance: z.array(z.string()).optional().describe('Selected preferences for AI coding assistance.'),
  security: z.array(z.string()).optional().describe('Selected preferences for security tooling.'),
  versionControl: z.array(z.string()).optional().describe('Selected preferences for version control enhancements.'),
  collaboration: z.array(z.string()).optional().describe('Selected preferences for collaboration tools.'),
}).describe('Detailed user preferences across various tooling categories.');

const RecommendExtensionsInputSchema = z.object({
  ideName: z.string().describe('The name of the IDE.'),
  projectType: z.string().describe('The type of project (e.g., Web Application, Mobile Game, Data Science). If "Other", projectTypeOther will specify.'),
  projectTypeOther: z.string().optional().describe('Specific project type if "Other" was selected.'),
  preferences: UserPreferencesSchema.describe('Structured user preferences for various tool categories.'),
  userNotes: z.string().optional().describe('Additional notes or specific requests from the user.'),
});
export type RecommendExtensionsInput = z.infer<typeof RecommendExtensionsInputSchema>;

const RecommendExtensionsOutputSchema = z.object({
  recommendedExtensions: z.array(z.string()).describe('A list of recommended extensions for the IDE.'),
  reasoning: z.string().describe('The reasoning behind the extension recommendations, considering project type, detailed preferences, and user notes. Focus on vibe coding, AI assistant configuration, and Vibe Coding Security best practices.'),
});
export type RecommendExtensionsOutput = z.infer<typeof RecommendExtensionsOutputSchema>;

export async function recommendExtensions(input: RecommendExtensionsInput): Promise<RecommendExtensionsOutput> {
  return recommendExtensionsFlow(input);
}

const recommendExtensionsPrompt = ai.definePrompt({
  name: 'recommendExtensionsPrompt',
  input: {schema: RecommendExtensionsInputSchema},
  output: {schema: RecommendExtensionsOutputSchema},
  prompt: `You are the Vibe Coder AI, an expert in IDE extension recommendation, security hardening, and AI-enhanced development environments. Your recommendations should be top-tier.

  Based on the IDE, project type, detailed user preferences, and any additional notes, recommend a list of extensions.
  Prioritize extensions that enhance "vibe coding" (developer experience, aesthetics, flow), AI assistant capabilities, and overall "Vibe Coding Security" (secure coding practices, vulnerability detection).

  IDE Name: {{{ideName}}}
  Project Type: {{projectType}}{{#if projectTypeOther}} (Specified as: {{{projectTypeOther}}}){{/if}}

  Detailed User Preferences:
  {{#if preferences.testing}}
  - Testing: {{#each preferences.testing}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}}
  {{/if}}
  {{#if preferences.lintingFormatters}}
  - Linting/Formatting: {{#each preferences.lintingFormatters}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}}
  {{/if}}
  {{#if preferences.aiAssistance}}
  - AI Assistance: {{#each preferences.aiAssistance}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}}
  {{/if}}
  {{#if preferences.security}}
  - Security: {{#each preferences.security}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}}
  {{/if}}
  {{#if preferences.versionControl}}
  - Version Control: {{#each preferences.versionControl}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}}
  {{/if}}
  {{#if preferences.collaboration}}
  - Collaboration: {{#each preferences.collaboration}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}}
  {{/if}}
  {{#unless preferences.testing}}{{#unless preferences.lintingFormatters}}{{#unless preferences.aiAssistance}}{{#unless preferences.security}}{{#unless preferences.versionControl}}{{#unless preferences.collaboration}}
  - No specific preferences selected in categories.
  {{/unless}}{{/unless}}{{/unless}}{{/unless}}{{/unless}}{{/unless}}

  {{#if userNotes}}
  User's Additional Notes: {{{userNotes}}}
  {{/if}}

  Provide a clear reasoning for your recommendations, explaining how they align with the user's input and Vibe Coder principles.
`,
});

const recommendExtensionsFlow = ai.defineFlow(
  {
    name: 'recommendExtensionsFlow',
    inputSchema: RecommendExtensionsInputSchema,
    outputSchema: RecommendExtensionsOutputSchema,
  },
  async input => {
    // Construct a comprehensive preference string if needed by a less capable model,
    // but Gemini should handle the structured input well with the Handlebars template.
    const {output} = await recommendExtensionsPrompt(input);
    return output!;
  }
);
